plugins {
  id 'base'
}

configurations {
  // Input: The uberjar for the server that will be run in Docker
  appServerUberjar
  // Output: The directory that has the Dockerfile and all other
  // artifacts needed at image build time
  appServerDockerDir
}

task stageAppServer(type: Copy) {
  description """Copies the uberjar and everything in app-server into\
  an output directory
  """
  from "$projectDir/app-server"
  from configurations.appServerUberjar
  into "$buildDir/target/app-server"
}
assemble.dependsOn(stageAppServer)

task buildAppDockerImage(type: Exec) {
  description """Builds the app-server docker image and uploads it
  to the local docker daemon. Intended for manual testing and debugging
  of the Dockerfile since the CDK manages building the image and uploading
  to ECR as a part of deployment."""
  workingDir "$buildDir/target/app-server"
  commandLine 'docker', 'build', '.',
    '-t', 'mhspradlin/test-builds:latest',
    '--label', 'app-server-test-build'
}
buildAppDockerImage.dependsOn(stageAppServer)
check.dependsOn(buildAppDockerImage)

task cleanTestDockerImages(type: Exec) {
  description """Removes all docker images uploaded to the registry as a part of testing."""
  String[] testImages = 'docker images -f label=app-server-test-build --format {{.ID}}'.execute().text.split("\n").findAll { it.size() > 0 }
  String[] removeImageCommand = ['docker', 'rmi']
  commandLine (testImages.length > 0 ? removeImageCommand + testImages : ['echo', 'No images to clean'])
}
clean.dependsOn(cleanTestDockerImages)

task runAppServer(type: Exec) {
  description """Runs the test docker image built from buildAppDockerImage.
  Intended for testing the Dockerfile."""
  commandLine 'docker', 'run', 'mhspradlin/test-builds:latest'
}
runAppServer.dependsOn(buildAppDockerImage)

dependencies {
  // Configures appServerUberjar to come from the app subproject
  appServerUberjar project(path: ':app-server', configuration: 'uberjar')
  // Sets the appServerDockerDir outputs to depend on
  // the output of the stageAppServer task, so downstream
  // tasks will rebuild if stageAppServer must rebuild
  appServerDockerDir files(stageAppServer)
}
